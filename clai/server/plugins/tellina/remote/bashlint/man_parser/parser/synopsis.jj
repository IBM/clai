/**
 * PatlParser
 */
options
{
  LOOKAHEAD = 2;
  FORCE_LA_CHECK = true;
  static = false;
}

PARSER_BEGIN(SynopParser)
package man_parser.parser;

import man_parser.cmd.*;

import main.Config;

import java.util.List;
import java.util.Optional;
import java.util.ArrayList;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.stream.Collectors;

public class SynopParser {

    public static void main(String[] args) throws ParseException {
        String testExample = "-a";
        String testExample2 = "[-a] b --config[=id] --b";
        Cmd.CmdOp tl = new SynopParser(new java.io.StringReader(testExample2)).compoundOp();
        System.out.println(tl);
    }
}
PARSER_END(SynopParser)

SKIP : {
  	" "
| 	"\r"
| 	"\t"
| 	"\n"
}

SKIP:
{
    <"/*">: IN_COMMENT
}

<IN_COMMENT> SKIP :
{
    <"/*">
    | <"*/"> { SwitchTo(DEFAULT); }
    | <~[]>
}

SKIP :
{
    <"//" (~["\n"])*>
}

<DEFAULT> TOKEN : /* Paranthesis */
{
  	<LPAREN: "(">
| 	<RPAREN: ")">
| 	<LBRACE: "{">
| 	<RBRACE: "}">
| 	<LBRACKET: "[">
| 	<RBRACKET: "]">
| 	<SEMICOLON: ";">
| 	<COMMA: ",">
| 	<DOT: ".">
}

<DEFAULT> TOKEN : /* Arrows */ { <FLAG: "-"<IDENTIFIER>> }

<DEFAULT> TOKEN :
{
  < CONSTANT : (< DIGIT >)+ >
| < #DIGIT : [ "0"-"9" ] >
}

<DEFAULT> TOKEN:
{
	<STRING: "\"" (<IDENTIFIER> | <CONSTANT> | " ")+ "\"">
}

<DEFAULT> TOKEN:
{
   <PLUS: "+">
	| <MINUS: "-">
	| <STAR: "*">
	| <SLASH: "/">
	| <BIT_AND: "&">
	| <BIT_OR: "|">
	| <XOR: "^">
	| <REM: "%">
}

/* IDENTIFIERS */
<DEFAULT> TOKEN : {
	<IDENTIFIER: <LETTER> (<PART_LETTER>)*>
| 	<#LETTER: ["0","@","$","A"-"Z","_","a"-"z"]>
|	<#PART_LETTER: ["@", "-","$","0"-"9","A"-"Z","_","a"-"z"]>
}


Cmd.Fl fl() : { Token s; }
{
    s = <FLAG> { System.out.println(s.toString()); return new Cmd.Fl(s.toString()); }
}

Cmd.Ar ar() : { Token s; } {
    (s = <IDENTIFIER> { return new Cmd.Ar(s.toString()); }
    | "<" s = <IDENTIFIER> ">" { return new Cmd.Ar(s.toString()); })
}

Cmd.NonTerminal nt() : {Token s; } {
    ":" s = <IDENTIFIER> ":" { return new Cmd.NonTerminal(s.toString()); }
}

Cmd.CmdOp singleOp() : { Cmd.CmdOp result; Token s; List<Cmd.CmdOp> temp = new ArrayList<Cmd.CmdOp>(); Cmd.Flv2 flagv2;} {
     (result = ar()
     ( s = "..." {
        Cmd.Ar ar = new Cmd.Ar(((Cmd.Ar)result).arg_name);
        ar.isList = true; result = ar;
     })?
    | result = nt()
      ( s = "..." {
            Cmd.NonTerminal nt = new Cmd.NonTerminal(((Cmd.NonTerminal)result).name);
            nt.isList = true; result = nt;
      })?
    | s = <FLAG> {
            String flagName = s.toString().substring(s.toString().indexOf("-") + 1);

            boolean belongsToWierdData = false;
            try {

                // load a hand crafted object
                List<String> lines = Files.readAllLines(Paths.get(Config.OptionWordDictionary));
                for (String u : lines) {
                    if (u.startsWith("-" + flagName)) {
                        belongsToWierdData = true;
                    }
                }
            } catch (IOException e) {
                e.printStackTrace();
            }

            if (flagName.length() == 1 || belongsToWierdData)
                result = new Cmd.Fl(s.toString());
            else {
                List<Cmd.CmdOp> flags = new ArrayList<Cmd.CmdOp>();
                for (char c : flagName.toCharArray()) {
                    flags.add(new Cmd.Fl(String.valueOf(c)));
                }
                result = new Cmd.Compound(flags);
            }
        }
    | ("[" result = compoundOp() "]") {
            boolean resultSet = false;
            if (result instanceof Cmd.Compound) {
                boolean allFlags = true;
                for (Cmd.CmdOp cmd : ((Cmd.Compound)result).commands) {
                    if (! (cmd instanceof Cmd.Fl)) {
                        allFlags = false;
                    }
                }
                if (allFlags == true) {
                    List<Cmd.CmdOp> cmdops = new ArrayList<Cmd.CmdOp>();
                    for (Cmd.CmdOp c : ((Cmd.Compound)result).commands) {
                        cmdops.add(new Cmd.Opt(c));
                    }
                    result = new Cmd.Compound(cmdops);
                    resultSet = true;
                }
            }
            if (!resultSet)
                result = new Cmd.Opt(result);
        }
    | ("--" s = <IDENTIFIER> { flagv2 = new Cmd.Flv2(s.toString()); }
           (("[" "=" s = <IDENTIFIER> "]" { flagv2.setName(s.toString(), true); })
            | ("=" s = <IDENTIFIER>) { flagv2.setName(s.toString(), false); } )?) { result = flagv2; }
    | ("{" result=compoundOp() "}")
    ) {
        return result;
    }
}

Cmd.CmdOp compoundOp() : {
    List<Cmd.CmdOp> cmds = new ArrayList<Cmd.CmdOp>();
    Cmd.Compound result; Token t;
    Cmd.CmdOp single;
    boolean isExclusive = false;
} {
    (single = singleOp() { cmds.add(single); })
    (
        (single = singleOp() { cmds.add(single); })+
        | ("|" single = singleOp() {
        cmds.add(single); isExclusive = true;})+
    )? {
        if (cmds.size() == 1)
            return cmds.get(0);
        else {
            if (!isExclusive)
                return new Cmd.Compound(cmds);
            else {
                return new Cmd.Exclusive(cmds);
            }
        }
    }
}